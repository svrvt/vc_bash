#!/bin/bash

# Show the current distribution
distribution() {
	local dtype
	# Assume unknown
	dtype="unknown"

	# First test against Fedora / RHEL / CentOS / generic Redhat derivative
	if [ -r /etc/rc.d/init.d/functions ]; then
		source /etc/rc.d/init.d/functions
		[ zz$(type -t passed 2>/dev/null) == "zzfunction" ] && dtype="redhat"

	# Then test against SUSE (must be after Redhat,
	# I've seen rc.status on Ubuntu I think? TODO: Recheck that)
	elif [ -r /etc/rc.status ]; then
		source /etc/rc.status
		[ zz$(type -t rc_reset 2>/dev/null) == "zzfunction" ] && dtype="suse"

	# Then test against Debian, Ubuntu and friends
	elif [ -r /lib/lsb/init-functions ]; then
		source /lib/lsb/init-functions
		[ zz$(type -t log_begin_msg 2>/dev/null) == "zzfunction" ] && dtype="debian"

	# Then test against Gentoo
	elif [ -r /etc/init.d/functions.sh ]; then
		source /etc/init.d/functions.sh
		[ zz$(type -t ebegin 2>/dev/null) == "zzfunction" ] && dtype="gentoo"

	# For Mandriva we currently just test if /etc/mandriva-release exists
	# and isn't empty (TODO: Find a better way :)
	elif [ -s /etc/mandriva-release ]; then
		dtype="mandriva"

	# For Slackware we currently just test if /etc/slackware-version exists
	elif [ -s /etc/slackware-version ]; then
		dtype="slackware"

	fi
	echo $dtype
}

# Show the current version of the operating system
ver() {
	local dtype
	dtype=$(distribution)

	if [ $dtype == "redhat" ]; then
		if [ -s /etc/redhat-release ]; then
			cat /etc/redhat-release && uname -a
		else
			cat /etc/issue && uname -a
		fi
	elif [ $dtype == "suse" ]; then
		cat /etc/SuSE-release
	elif [ $dtype == "debian" ]; then
		lsb_release -a
		# sudo cat /etc/issue && sudo cat /etc/issue.net && sudo cat /etc/lsb_release && sudo cat /etc/os-release # Linux Mint option 2
	elif [ $dtype == "gentoo" ]; then
		cat /etc/gentoo-release
	elif [ $dtype == "mandriva" ]; then
		cat /etc/mandriva-release
	elif [ $dtype == "slackware" ]; then
		cat /etc/slackware-version
	else
		if [ -s /etc/issue ]; then
			cat /etc/issue
		else
			echo "Error: Unknown distribution"
			exit 1
		fi
	fi
}

# Automatically install the needed support files for this .bashrc file
install_bashrc_support() {
	local dtype
	dtype=$(distribution)

	if [ $dtype == "redhat" ]; then
		sudo yum install multitail tree joe
	elif [ $dtype == "suse" ]; then
		sudo zypper install multitail
		sudo zypper install tree
		sudo zypper install joe
	elif [ $dtype == "debian" ]; then
		sudo apt-get install multitail tree joe
	elif [ $dtype == "gentoo" ]; then
		sudo emerge multitail
		sudo emerge tree
		sudo emerge joe
	elif [ $dtype == "mandriva" ]; then
		sudo urpmi multitail
		sudo urpmi tree
		sudo urpmi joe
	elif [ $dtype == "slackware" ]; then
		echo "No install support for Slackware"
	else
		echo "Unknown distribution"
	fi
}
# alias cpu="grep 'cpu ' /proc/stat | awk '{usage=(\$2+\$4)*100/(\$2+\$4+\$5)} END {print usage}' | awk '{printf(\"%.1f\n\", \$1)}'"

# alias cpu="grep 'cpu ' /proc/stat | awk 'usage=(\$2+\$4)*100/(\$2+\$4+\$5) {print usage}' | awk '{printf(\"%.1f\n\", \$1)}'"
# function __setprompt {
# 	local LAST_COMMAND=$? # Must come first!
#
# 	# Define colors
# 	local LIGHTGRAY="\033[0;37m"
# 	local WHITE="\033[1;37m"
# 	local BLACK="\033[0;30m"
# 	local DARKGRAY="\033[1;30m"
# 	local RED="\033[0;31m"
# 	local LIGHTRED="\033[1;31m"
# 	local GREEN="\033[0;32m"
# 	local LIGHTGREEN="\033[1;32m"
# 	local BROWN="\033[0;33m"
# 	local YELLOW="\033[1;33m"
# 	local BLUE="\033[0;34m"
# 	local LIGHTBLUE="\033[1;34m"
# 	local MAGENTA="\033[0;35m"
# 	local LIGHTMAGENTA="\033[1;35m"
# 	local CYAN="\033[0;36m"
# 	local LIGHTCYAN="\033[1;36m"
# 	local NOCOLOR="\033[0m"
#
# 	# Show error exit code if there is one
# 	if [[ $LAST_COMMAND != 0 ]]; then
# 		# PS1="\[${RED}\](\[${LIGHTRED}\]ERROR\[${RED}\])-(\[${LIGHTRED}\]Exit Code \[${WHITE}\]${LAST_COMMAND}\[${RED}\])-(\[${LIGHTRED}\]"
# 		PS1="\[${DARKGRAY}\](\[${LIGHTRED}\]ERROR\[${DARKGRAY}\])-(\[${RED}\]Exit Code \[${LIGHTRED}\]${LAST_COMMAND}\[${DARKGRAY}\])-(\[${RED}\]"
# 		if [[ $LAST_COMMAND == 1 ]]; then
# 			PS1+="General error"
# 		elif [ $LAST_COMMAND == 2 ]; then
# 			PS1+="Missing keyword, command, or permission problem"
# 		elif [ $LAST_COMMAND == 126 ]; then
# 			PS1+="Permission problem or command is not an executable"
# 		elif [ $LAST_COMMAND == 127 ]; then
# 			PS1+="Command not found"
# 		elif [ $LAST_COMMAND == 128 ]; then
# 			PS1+="Invalid argument to exit"
# 		elif [ $LAST_COMMAND == 129 ]; then
# 			PS1+="Fatal error signal 1"
# 		elif [ $LAST_COMMAND == 130 ]; then
# 			PS1+="Script terminated by Control-C"
# 		elif [ $LAST_COMMAND == 131 ]; then
# 			PS1+="Fatal error signal 3"
# 		elif [ $LAST_COMMAND == 132 ]; then
# 			PS1+="Fatal error signal 4"
# 		elif [ $LAST_COMMAND == 133 ]; then
# 			PS1+="Fatal error signal 5"
# 		elif [ $LAST_COMMAND == 134 ]; then
# 			PS1+="Fatal error signal 6"
# 		elif [ $LAST_COMMAND == 135 ]; then
# 			PS1+="Fatal error signal 7"
# 		elif [ $LAST_COMMAND == 136 ]; then
# 			PS1+="Fatal error signal 8"
# 		elif [ $LAST_COMMAND == 137 ]; then
# 			PS1+="Fatal error signal 9"
# 		elif [ $LAST_COMMAND -gt 255 ]; then
# 			PS1+="Exit status out of range"
# 		else
# 			PS1+="Unknown error code"
# 		fi
# 		PS1+="\[${DARKGRAY}\])\[${NOCOLOR}\]\n"
# 	else
# 		PS1=""
# 	fi
#
# 	# Date
# 	PS1+="\[${DARKGRAY}\](\[${CYAN}\]\$(date +%a) $(date +%b-'%-m')" # Date
# 	PS1+="${BLUE} $(date +'%-I':%M:%S%P)\[${DARKGRAY}\])-"           # Time
#
# 	# CPU
# 	PS1+="(\[${MAGENTA}\]CPU $(cpu)%"
#
# 	# Jobs
# 	PS1+="\[${DARKGRAY}\]:\[${MAGENTA}\]\j"
#
# 	# Network Connections (for a server - comment out for non-server)
# 	PS1+="\[${DARKGRAY}\]:\[${MAGENTA}\]Net $(awk 'END {print NR}' /proc/net/tcp)"
#
# 	PS1+="\[${DARKGRAY}\])-"
#
# 	# User and server
# 	local SSH_IP=$(echo $SSH_CLIENT | awk '{ print $1 }')
# 	local SSH2_IP=$(echo $SSH2_CLIENT | awk '{ print $1 }')
# 	if [ $SSH2_IP ] || [ $SSH_IP ]; then
# 		PS1+="(\[${RED}\]\u@\h"
# 	else
# 		PS1+="(\[${RED}\]\u"
# 	fi
#
# 	# Current directory
# 	PS1+="\[${DARKGRAY}\]:\[${BROWN}\]\w\[${DARKGRAY}\])-"
#
# 	# Total size of files in current directory
# 	PS1+="(\[${GREEN}\]$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')\[${DARKGRAY}\]:"
#
# 	# Number of files
# 	PS1+="\[${GREEN}\]\$(/bin/ls -A -1 | /usr/bin/wc -l)\[${DARKGRAY}\])"
#
# 	# Skip to the next line
# 	PS1+="\n"
#
# 	if [[ $EUID -ne 0 ]]; then
# 		PS1+="\[${GREEN}\]>\[${NOCOLOR}\] " # Normal user
# 	else
# 		PS1+="\[${RED}\]>\[${NOCOLOR}\] " # Root user
# 	fi
#
# 	# PS2 is used to continue a command using the \ character
# 	PS2="\[${DARKGRAY}\]>\[${NOCOLOR}\] "
#
# 	# PS3 is used to enter a number choice in a script
# 	PS3='Please enter a number from above list: '
#
# 	# PS4 is used for tracing a script in debug mode
# 	PS4='\[${DARKGRAY}\]+\[${NOCOLOR}\] '
# }
# PROMPT_COMMAND='__setprompt'
