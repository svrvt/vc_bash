#!/bin/bash
# ------------------------------------------------------------------------------
# Prompt
# ------------------------------------------------------------------------------
# see https://github.com/magicmonty/bash-git-prompt

# PS1_START='\[\033[01;32m\]\u\[\033[01;33m\]@\[\033[01;35m\]\h\[\033[01;32m\]:\[\033[01;36m\]\w'
# PS1_END='\n\[\033[01;36m\]\$\[\033[00m\] '
# export PS1=${PS1_START}${PS1_END}
#
# prompt() {
# 	export GIT_PROMPT_ONLY_IN_REPO=1
# 	export GIT_PROMPT_START=${PS1_START}
# 	export GIT_PROMPT_END=${PS1_END}
# }

# if [[ ${OSTYPE} =~ "linux" ]] ||
# 	[[ ${OSTYPE} =~ "cygwin" ]] ||
# 	[[ ${OSTYPE} =~ "msys" ]]; then
# 	if fileExists "$HOME"/.bash-git-prompt/gitprompt.sh; then
# 		prompt
# 		source "$HOME"/.bash-git-prompt/gitprompt.sh
# 	fi
# elif [[ ${OSTYPE} =~ "darwin" ]]; then
# 	if [[ -f $(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh ]]; then
# 		prompt
# 		source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
# 	fi
# fi

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color'
fi

prompt_git() {
	local s=''
	local branchName=''

	# Check if the current directory is in a Git repository.
	if [ $(
		git rev-parse --is-inside-work-tree &>/dev/null
		echo "${?}"
	) == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null

			# Check for uncommitted changes in the index.
			if [ ! "$(git diff --quiet --ignore-submodules --cached)" ]; then
				s+='+'
			fi

			# Check for unstaged changes.
			if [ ! "$(git diff-files --quiet --ignore-submodules --)" ]; then
				s+='!'
			fi

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?'
			fi

			# Check for stashed files.
			if [ "$(git rev-parse --verify refs/stash &>/dev/null)" ]; then
				s+='$'
			fi

		fi

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
			git rev-parse --short HEAD 2>/dev/null ||
			echo '(unknown)')"

		[ -n "${s}" ] && s=" [${s}]"

		echo -e "${1}${branchName}${blue}${s}"
	else
		return
	fi
}

# if [ -n "$GUIX_ENVIRONMENT" ]; then
# 	export PS1="\u@\h \w [dev]\$ "
# fi

prompt_node() {
	if [ -x "$(command -v node)" ]; then
		node_version=$(node -v)
		if [ -f "./package.json" ]; then
			nvm_string=""
			if [[ -f "./.nvmrc" && ("$(cat .nvmrc)" != $node_version && "v$(cat .nvmrc)" != $node_version) ]]; then
				nvm_string="${red} != .nvmrc"
			fi
			echo -e "${1}${node_version}${nvm_string}"
		fi
	fi
}

prompt_k8s() {
	if [[ ! -z "$KUBECONFIG" ]]; then
		echo -e "${1}$(k config current-context)/$(k config view --minify --output jsonpath={..namespace})"
	fi
}

if tput setaf 1 &>/dev/null; then
	tput sgr0 # reset colors
	bold=$(tput bold)
	reset=$(tput sgr0)
	# Solarized colors, taken from http://git.io/solarized-colors
	black=$(tput setaf 0)
	blue=$(tput setaf 33)
	cyan=$(tput setaf 37)
	green=$(tput setaf 64)
	orange=$(tput setaf 166)
	purple=$(tput setaf 125)
	red=$(tput setaf 124)
	violet=$(tput setaf 61)
	white=$(tput setaf 15)
	yellow=$(tput setaf 136)
else
	bold=''
	reset="\e[0m"
	black="\e[1;30m"
	blue="\e[1;34m"
	cyan="\e[1;36m"
	green="\e[1;32m"
	orange="\e[1;33m"
	purple="\e[1;35m"
	red="\e[1;31m"
	violet="\e[1;35m"
	white="\e[1;37m"
	yellow="\e[1;33m"
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}"
else
	userStyle="${orange}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}"
else
	hostStyle="${yellow}"
fi

# # Set the terminal title to the current working directory.
# PS1="\[\033]0;\w\007\]"
# PS1+="\[${bold}\]\n"      # newline
# PS1+="\[${userStyle}\]\u" # username
# # PS1+="\[${white}\] at "
# PS1+="\[${white}\]*"
# PS1+="\[${hostStyle}\]\h" # host
# # PS1+="\[${white}\] in ${green}\w"                # working directory
# PS1+="\[ ${green}\w"                             # working directory
# PS1+="\$(prompt_git \"${white} git:${violet}\")" # Git repository details
# PS1+="\$(prompt_node \"${white} node:${cyan}\")" # Node.js version
# PS1+="\$(prompt_k8s \"${white} k8s:${purple}\")" # Kubernetes config
# PS1+="\n"
# # PS1+="\[${white}\]λ \[${reset}\]" # `$` (and reset color)
# PS1+="\[${white}\]> \[${reset}\]" # `$` (and reset color)
# export PS1
#
# PS2="\[${yellow}\]→ \[${reset}\]"
# export PS2

##################
# alias cpu="grep 'cpu ' /proc/stat | awk 'usage=(\$2+\$4)*100/(\$2+\$4+\$5) {print usage}' | awk '{printf(\"%.1f\n\", \$1)}'"
function __setprompt {
	local LAST_COMMAND=$? # Must come first!

	# Define colors
	local LIGHTGRAY="\033[0;37m"
	local WHITE="\033[1;37m"
	local BLACK="\033[0;30m"
	local DARKGRAY="\033[1;30m"
	local RED="\033[0;31m"
	local LIGHTRED="\033[1;31m"
	local GREEN="\033[0;32m"
	local LIGHTGREEN="\033[1;32m"
	local BROWN="\033[0;33m"
	local YELLOW="\033[1;33m"
	local BLUE="\033[0;34m"
	local LIGHTBLUE="\033[1;34m"
	local MAGENTA="\033[0;35m"
	local LIGHTMAGENTA="\033[1;35m"
	local CYAN="\033[0;36m"
	local LIGHTCYAN="\033[1;36m"
	local NOCOLOR="\033[0m"

	# Show error exit code if there is one
	if [[ $LAST_COMMAND != 0 ]]; then
		# PS1="\[${RED}\](\[${LIGHTRED}\]ERROR\[${RED}\])-(\[${LIGHTRED}\]Exit Code \[${WHITE}\]${LAST_COMMAND}\[${RED}\])-(\[${LIGHTRED}\]"
		PS1="\[${DARKGRAY}\](\[${LIGHTRED}\]ERROR\[${DARKGRAY}\])-(\[${RED}\]Exit Code \[${LIGHTRED}\]${LAST_COMMAND}\[${DARKGRAY}\])-(\[${RED}\]"
		if [[ $LAST_COMMAND == 1 ]]; then
			PS1+="General error"
		elif [ $LAST_COMMAND == 2 ]; then
			PS1+="Missing keyword, command, or permission problem"
		elif [ $LAST_COMMAND == 126 ]; then
			PS1+="Permission problem or command is not an executable"
		elif [ $LAST_COMMAND == 127 ]; then
			PS1+="Command not found"
		elif [ $LAST_COMMAND == 128 ]; then
			PS1+="Invalid argument to exit"
		elif [ $LAST_COMMAND == 129 ]; then
			PS1+="Fatal error signal 1"
		elif [ $LAST_COMMAND == 130 ]; then
			PS1+="Script terminated by Control-C"
		elif [ $LAST_COMMAND == 131 ]; then
			PS1+="Fatal error signal 3"
		elif [ $LAST_COMMAND == 132 ]; then
			PS1+="Fatal error signal 4"
		elif [ $LAST_COMMAND == 133 ]; then
			PS1+="Fatal error signal 5"
		elif [ $LAST_COMMAND == 134 ]; then
			PS1+="Fatal error signal 6"
		elif [ $LAST_COMMAND == 135 ]; then
			PS1+="Fatal error signal 7"
		elif [ $LAST_COMMAND == 136 ]; then
			PS1+="Fatal error signal 8"
		elif [ $LAST_COMMAND == 137 ]; then
			PS1+="Fatal error signal 9"
		elif [ $LAST_COMMAND -gt 255 ]; then
			PS1+="Exit status out of range"
		else
			PS1+="Unknown error code"
		fi
		PS1+="\[${DARKGRAY}\])\[${NOCOLOR}\]\n"
	else
		PS1=""
	fi

	# Date
	# PS1+="\[${DARKGRAY}\](\[${CYAN}\]\$(date +%a) $(date +%b-'%-m')" # Date
	# PS1+="${BLUE} $(date +'%-I':%M:%S%P)\[${DARKGRAY}\])-"           # Time

	# CPU
	# PS1+="(\[${MAGENTA}\]CPU $(cpu)%"

	# Jobs
	# PS1+="\[${DARKGRAY}\]:\[${MAGENTA}\]\j"

	# Network Connections (for a server - comment out for non-server)
	# PS1+="\[${DARKGRAY}\]:\[${MAGENTA}\]Net $(awk 'END {print NR}' /proc/net/tcp)"

	# PS1+="\[${DARKGRAY}\])-"

	# User and server
	local SSH_IP=$(echo $SSH_CLIENT | awk '{ print $1 }')
	local SSH2_IP=$(echo $SSH2_CLIENT | awk '{ print $1 }')
	if [ $SSH2_IP ] || [ $SSH_IP ]; then
		PS1+="\[${DARKGRAY}\](\[${RED}\]\u@\h"
	else
		PS1+="\[${DARKGRAY}\](\[${RED}\]\u\[${WHITE}\]*\[${BLUE}\]\h"
	fi

	# Current directory
	PS1+="\[${DARKGRAY}\]:\[${BROWN}\]\w\[${DARKGRAY}\])-"

	# Total size of files in current directory
	# PS1+="(\[${GREEN}\]$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')\[${DARKGRAY}\]:"

	# Number of files
	# PS1+="\[${GREEN}\]\$(/bin/ls -A -1 | /usr/bin/wc -l)\[${DARKGRAY}\])"

	# Skip to the next line
	PS1+="\n"
	###
	PS1+="\$(prompt_git \"${white} git:${violet}\")" # Git repository details
	PS1+="\$(prompt_node \"${white} node:${cyan}\")" # Node.js version
	PS1+="\$(prompt_k8s \"${white} k8s:${purple}\")" # Kubernetes config
	###
	if [[ $EUID -ne 0 ]]; then
		PS1+="\[${GREEN}\]>\[${NOCOLOR}\] " # Normal user
	else
		PS1+="\[${RED}\]>\[${NOCOLOR}\] " # Root user
	fi

	# PS2 is used to continue a command using the \ character
	PS2="\[${DARKGRAY}\]>\[${NOCOLOR}\] "

	# PS3 is used to enter a number choice in a script
	PS3='Please enter a number from above list: '

	# PS4 is used for tracing a script in debug mode
	PS4='\[${DARKGRAY}\]+\[${NOCOLOR}\] '
}
PROMPT_COMMAND='__setprompt'

##################
